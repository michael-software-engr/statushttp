{"version":3,"sources":["images/logo.svg","redux/app.js","redux/rootReducer.js","components/App/Header.js","components/App/URLInput.js","components/App/results/Loading.js","components/App/results/RTable.js","components/App/results/Results.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","DUMMY_ACTION","rootReducer","combineReducers","app","state","action","type","payload","dummy","Header","Container","textAlign","Card","raised","fluid","Content","Meta","Description","List","Item","href","target","rel","URLInput","onChange","onSumbit","value","error","warningMessages","statusMessages","onErrorDismiss","onWarningDismiss","onOtherDismiss","warning","length","isWarning","Form","Segment","inverted","bulleted","TextArea","rows","placeholder","join","Message","header","list","onDismiss","Divider","hidden","Button","onClick","disabled","trim","defaultProps","Loading","className","src","logo","alt","RTable","results","Table","celled","Row","HeaderCell","Body","sort","a","b","ix","map","name","uRL","passed","statusMessage","key","Cell","positive","negative","Icon","Results","isFetchting","selector","App","props","urlInputOnChangeHandler","event","setState","urlInput","urlInputOnSubmitHandler","preventDefault","fetch","method","mode","cache","credentials","headers","redirect","referrer","body","JSON","stringify","then","response","json","humps","camelizeKeys","urlInputOnErrorDismiss","urlInputOnWarningDismiss","urlInputOnOtherDismiss","this","Grid","columns","Column","width","React","Component","Boolean","window","location","hostname","match","store","createStore","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf087652.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const DUMMY_ACTION = '/dummy/action';\n\nexport default function reducer(state = {}, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case DUMMY_ACTION: {\n      return { ...state, dummy: payload };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport app from './app';\n\nconst rootReducer = combineReducers({\n  app\n});\n\nexport default rootReducer;\n","import React from 'react';\n\nimport {\n  Container, Card, List\n} from 'semantic-ui-react';\n\nconst Header = () => (\n  <Container textAlign=\"left\">\n    <Card raised fluid>\n      <Card.Content>\n        <Card.Header>HTTP Checker</Card.Header>\n        <Card.Meta>Check if a server is up using HTTP</Card.Meta>\n        <Card.Description>\n          <List>\n            <List.Item>\n              Back end (Go):\n              {' '}\n              <a\n                href=\"https://github.com/michael-software-engr/statushttp\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                github.com/michael-software-engr/statushttp\n              </a>\n            </List.Item>\n\n            <List.Item>\n              Front end (React JS):\n              {' '}\n              <a\n                href=\"https://github.com/michael-software-engr/statushttp/tree/master/app/javascript/app\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                github.com/michael-software-engr/statushttp/tree/master/app/javascript/app\n              </a>\n            </List.Item>\n          </List>\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  </Container>\n);\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Container, Form, TextArea, Button,\n  Message,\n  Segment,\n  Divider,\n  List\n} from 'semantic-ui-react';\n\nconst URLInput = ({\n  onChange, onSumbit, value,\n  error,\n  warningMessages,\n  statusMessages,\n  onErrorDismiss,\n  onWarningDismiss,\n  onOtherDismiss\n}) => {\n  const warning = warningMessages.length > 0;\n\n  const isWarning = error ? false : warning;\n\n  return (\n    <Container textAlign=\"left\">\n      <Form error={!!error} warning={isWarning}>\n        <Segment inverted>\n          Enter URLs\n          <List bulleted>\n            <List.Item>separated by spaces or new lines</List.Item>\n            <List.Item>maximum of 10</List.Item>\n            <List.Item>must be unique</List.Item>\n            <List.Item>if URL has no scheme, &quot;https&quot; will be used</List.Item>\n          </List>\n        </Segment>\n        <TextArea\n          onChange={onChange}\n          value={value}\n          rows={10}\n          placeholder={[\n            'example.org',\n            'httpstat.us/404'\n          ].join('\\n')}\n        />\n\n        <Message\n          error\n          header=\"Errors\"\n          list={[error]}\n          onDismiss={onErrorDismiss}\n        />\n\n        <Message\n          warning\n          header=\"Warnings\"\n          list={warningMessages}\n          onDismiss={onWarningDismiss}\n        />\n\n        {statusMessages && statusMessages.length > 0 && (\n          <Message\n            header=\"Other\"\n            list={statusMessages}\n            onDismiss={onOtherDismiss}\n          />\n        )}\n\n        <Divider hidden />\n\n        <Button type=\"submit\" onClick={onSumbit} disabled={!value.trim()}>Submit</Button>\n      </Form>\n    </Container>\n  );\n};\n\nURLInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onSumbit: PropTypes.func.isRequired,\n  onErrorDismiss: PropTypes.func.isRequired,\n  onWarningDismiss: PropTypes.func.isRequired,\n  onOtherDismiss: PropTypes.func.isRequired,\n  error: PropTypes.string,\n  value: PropTypes.string,\n  warningMessages: PropTypes.arrayOf(PropTypes.string),\n  statusMessages: PropTypes.arrayOf(PropTypes.string)\n};\n\nURLInput.defaultProps = {\n  error: '',\n  value: '',\n  warningMessages: [],\n  statusMessages: []\n};\n\nexport default URLInput;\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport logo from '../../../images/logo.svg';\n\nconst Loading = () => (\n  <div className=\"App-loading\">\n    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    <p>Checking URLs...</p>\n  </div>\n);\n\n// Loading.propTypes = {\n// };\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Table,\n  Icon,\n} from 'semantic-ui-react';\n\nconst RTable = ({ results }) => (\n  <Table celled>\n    <Table.Header>\n      <Table.Row>\n        <Table.HeaderCell />\n        <Table.HeaderCell>URL</Table.HeaderCell>\n        <Table.HeaderCell>Status</Table.HeaderCell>\n        <Table.HeaderCell>Messages</Table.HeaderCell>\n      </Table.Row>\n    </Table.Header>\n\n    <Table.Body>\n      {\n        results.sort((a, b) => a.ix - b.ix).map(({\n          ix, name, uRL, passed, statusMessage\n        }) => (\n          <Table.Row key={uRL}>\n            <Table.Cell textAlign=\"right\">{ix + 1}</Table.Cell>\n            <Table.Cell>\n              <a href={uRL} target=\"_blank\" rel=\"noopener noreferrer\">\n                {name}\n              </a>\n            </Table.Cell>\n\n            <Table.Cell\n              positive={passed}\n              negative={!passed}\n            >\n              {passed ? (\n                <Icon name=\"checkmark\" />\n              ) : (\n                <Icon name=\"x\" />\n              )}\n              &nbsp;\n              {passed ? 'Passed' : 'Failed'}\n            </Table.Cell>\n            <Table.Cell>{statusMessage}</Table.Cell>\n          </Table.Row>\n        ))\n      }\n    </Table.Body>\n  </Table>\n);\n\nRTable.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.shape()),\n};\n\nRTable.defaultProps = {\n  results: []\n};\n\nexport default RTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Container\n} from 'semantic-ui-react';\n\nimport Loading from './Loading';\nimport RTable from './RTable';\n\nimport '../App.css';\n\nconst Results = ({ results, isFetchting }) => {\n  const selector = () => {\n    switch (true) {\n      case isFetchting: {\n        return <Loading />;\n      }\n\n      case results.length > 0: {\n        return <RTable results={results} />;\n      }\n\n      default: {\n        return null;\n      }\n    }\n  };\n\n  const Content = selector();\n\n  return (\n    <Container textAlign=\"left\">\n      {Content && Content}\n    </Container>\n  );\n};\n\nResults.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.shape()),\n  isFetchting: PropTypes.bool.isRequired\n};\n\nResults.defaultProps = {\n  results: []\n};\n\nexport default Results;\n","import React from 'react';\n\nimport {\n  Container, Grid,\n  Divider\n} from 'semantic-ui-react';\nimport fetch from 'cross-fetch';\nimport humps from 'humps';\n\nimport Header from './Header';\nimport URLInput from './URLInput';\nimport Results from './results/Results';\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFetchting: false,\n      urlInput: [\n        // 'http://no-such-host-example',\n        // 'google.com:81', // Should time out\n        // 'nmap.org',\n        // 'yahoo.com:81', // Should time out\n        // 'https://golang.org',\n        // 'yahoo.com',\n        // 'yahoo.com', // Duplicate\n        // 'duckduckgo.com',\n        // 'yahoo.com',\n        // 'yahoo.com', // Duplicate\n        // 'yahoo.com', // Duplicate\n        // 'nmap.org', // Duplicate\n        // 'http://bing.com',\n        // 'amazon.com',\n        // 'micron.com', // 10th unique\n        // 'github.com', // Should be exclude from here or to end of list\n        // 'bitbucket.org',\n        // 'reactjs.org',\n        // 'ruby-lang.org'\n      ].join('\\n'),\n      response: {}\n    };\n  }\n\n  urlInputOnChangeHandler = (event) => {\n    this.setState({ urlInput: event.target.value });\n  }\n\n  urlInputOnSubmitHandler = (event) => {\n    event.preventDefault();\n\n    this.setState({ isFetchting: true });\n\n    fetch('/api', {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors', // no-cors, cors, *same-origin\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json',\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      redirect: 'follow', // manual, *follow, error\n      referrer: 'no-referrer', // no-referrer, *client\n      body: JSON.stringify(this.state.urlInput), // body data type must match \"Content-Type\" header\n    }).then((response) => response.json()).then((json) => {\n      const response = humps.camelizeKeys(json);\n\n      this.setState({ response, isFetchting: false });\n    });\n  }\n\n  urlInputOnErrorDismiss = () => {\n    this.setState((state) => ({\n      response: { ...state.response, error: null }\n    }));\n  }\n\n  urlInputOnWarningDismiss = () => {\n    this.setState((state) => ({\n      response: { ...state.response, warningMessages: [] }\n    }));\n  }\n\n  urlInputOnOtherDismiss = () => {\n    this.setState((state) => ({\n      response: { ...state.response, statusMessages: [] }\n    }));\n  }\n\n  render() {\n    const { urlInput, response, isFetchting } = this.state;\n    return (\n      <Container className=\"App\">\n        <Divider hidden />\n        <Header />\n        <Divider hidden />\n\n        <Grid columns={2}>\n          <Grid.Column width={6}>\n            <URLInput\n              onChange={this.urlInputOnChangeHandler}\n              onSumbit={this.urlInputOnSubmitHandler}\n              value={urlInput}\n              error={response.error}\n              warningMessages={response.warningMessages}\n              statusMessages={response.statusMessages}\n              onErrorDismiss={this.urlInputOnErrorDismiss}\n              onWarningDismiss={this.urlInputOnWarningDismiss}\n              onOtherDismiss={this.urlInputOnOtherDismiss}\n            />\n          </Grid.Column>\n          <Grid.Column width={10}>\n            <Results results={response.results} isFetchting={isFetchting} />\n          </Grid.Column>\n        </Grid>\n      </Container>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport rootReducer from './redux/rootReducer';\nimport App from './components/App/App';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}